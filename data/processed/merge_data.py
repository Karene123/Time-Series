# -*- coding: utf-8 -*-
"""merge_data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/162Cxq5bMDo5mIonbF5AWhGya9glQ7_-3

# Missing Data
"""

# check if there are any missing data
CPI_df.isnull().sum()

FEDFUNDS_df.isnull().sum()

GDP_df.isnull().sum()

M2SL_df.isnull().sum()

M2V_df.isnull().sum()



"""# Merge"""

data = pd.merge(pd.merge(pd.merge(pd.merge(CPI_df, FEDFUNDS_df, on='observation_date', how='outer'), M2SL_df, on='observation_date', how='outer'), M2V_df, on='observation_date', how='outer') , GDP_df, on='observation_date', how='outer')
data

# Data Types
data.dtypes

# Convert the month column to an index
data.index = data['observation_date']
del data['observation_date']

print(data.head())

data.index

data.index.freq = 'MS'
data.index

# Plot the data to observe the years where it starts to have missing data
plt.figure(figsize=(10, 30))

plt.subplot(5, 1, 1)
sns.lineplot(data['CPIAUCSL'])
plt.title("CPI")

plt.subplot(5, 1, 2)
sns.lineplot(data['FEDFUNDS'])
plt.title("FEDFUNDS")

plt.subplot(5, 1, 3)
sns.lineplot(data['M2SL'])
plt.title("M2SL")

plt.subplot(5, 1, 4)
sns.lineplot(data['M2V'])
plt.title("M2V")

plt.subplot(5, 1, 5)
sns.lineplot(data['GDPC1'])
plt.title("GDPC1")

# Slicing the data to include only the years of interest
data_sliced = data.loc["19600101":"20241001", :]
print(data_sliced)

# Let's check again the number of missing values per column
data_sliced.isnull().sum()

# Compute a function for missing data percentage
def missing_value_percentage(df):
    missing_count = df.isnull().sum()  # Count of missing values
    total_rows = len(df)  # Total number of rows
    missing_percent = (missing_count / total_rows) * 100  # Percentage calculation

    # Create a DataFrame to display results
    missing_df = pd.DataFrame({'Missing Count': missing_count, 'Missing Percentage': missing_percent})

    # Filter only columns with missing values
    missing_df = missing_df[missing_df['Missing Count'] > 0]
    return missing_df

missing_value_percentage(data_sliced)

# describe() shows a quick statistic summary of your data
data_sliced.describe()